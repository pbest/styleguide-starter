// =====
// Tools
// =====
// Mixins
@mixin cf {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin centre {
  float: none;
  margin-left: auto;
  margin-right: auto;
}

@mixin z-index($layer, $position: relative) {
  position: $position;
  z-index: layer-index($layer);
}

@mixin background($color) {
  background: map-get($colors, $color);
  background: color($color);
}

@mixin txt-color($color) {
  color: map-get($colors, $color);
  color: color($color);
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin respond-above($breakpoint-name) {
  $breakpoint-value: breakpoint($breakpoint-name);
  @if $breakpoint-value != null {
    @media screen and (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn unquote('"Missing breakpoint "#{$breakpoint-name}""');
  }
}

@mixin text-size($text-size, $breakpoint-name: 'small') {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);
  @if $text-size-properties {
    font-size: map-get($text-size-properties, 'font-size');
    line-height: map-get($text-size-properties, 'line-height');
  }
}

@mixin responsive-text-size($text-size, $default-breakpoint: 'small') {
  @include text-size($text-size, $default-breakpoint);
  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);
  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint and breakpoint($breakpoint-name) != null {
      @include respond-above($breakpoint-name) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}

// Functions
@function color($color-name) {
  @return var(--#{$color-name}-color, map-get($colors, $color-name));
}

@function text-color($color) {
  @if (lightness($color) > 49) {
    @return #000000; // Lighter backgorund, return dark color
  } @else {
    @return #ffffff; // Darker background, return light color
  }
}

@function layer-index($layer) {
  @return index($layers, $layer);
}

@function breakpoint($breakpoint-name) {
  @return map-get($textpoints, $breakpoint-name);
}

@function text-breakpoints-for($text-size) {
  $text-breakpoints: map-get($text-sizing, $text-size);
  @if $text-breakpoints {
    @return $text-breakpoints;
  }
  @warn unquote('"Text size "#{$text-size}" not found in $text-sizing"');
}

@function text-properties-for($text-size, $breakpoint-name) {
  $text-breakpoints: text-breakpoints-for($text-size);
  $text-properties: map-get($text-breakpoints, $breakpoint-name);
  @if $text-properties {
    @return $text-properties;
  }
  @warn unquote('"Breakpoint "#{$breakpoint-name}" for text size "#{$text-size}" was not found"');
}
